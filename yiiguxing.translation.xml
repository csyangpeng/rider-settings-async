<application>
  <component name="AppStorage">
    <histories>
      <item value="Failed to compare two elements in the array." />
      <item value="Component Galaxy.OS.Runtime.Session.OSTestAbpSessionExtensions could not be registered. There is already a component with that name. Did you want to modify the existing component instead? If not, make sure you specify a unique name." />
      <item value="Cannot access non-static property 'PrincipalAccessor' in static context" />
      <item value="Component Galaxy.OS.Runtime.Session.ClaimAbpSessionExtensions could not be registered. There is already a component with that name. Did you want to modify the existing component instead? If not, make sure you specify a unique name." />
      <item value="No component for supporting the service Galaxy.OS.Runtime.Session.IClaimAbpSessionExtensions was found" />
      <item value="Cannot access internal method 'GetMemberIdentifier' here" />
      <item value="Extension method can only be declared in non-generic, non-nested static class" />
      <item value="JSON standard does not allow comments. Use JSMin or similar tool to remove comments before parsing." />
      <item value="Checks if permission dependency is satisfied." />
      <item value="This parameter is obsolete." />
      <item value="This parameter is obsolete" />
      <item value="equence contains no elements" />
      <item value="Identifier expected" />
      <item value="Sequence contains no elements" />
      <item value="Represents a time interval." />
      <item value="Process" />
      <item value="Step" />
      <item value="Content of collection 'Progress' is never updated" />
      <item value="Missing type map configuration or unsupported mapping." />
      <item value="Expression 'x =&gt; x.ApplicationForm.CreationTime' must resolve to top-level member and not any child object's properties. You can use ForPath, a custom resolver on the child type or the AfterMap option instead. (Parameter 'lambdaExpression')" />
      <item value="Execute a mapping from the source object to the existing destination object" />
      <item value="Possible multiple enumeration" />
      <item value="Should Assert Exception" />
      <item value="The type initializer for 'Galaxy.OS.Runtime.Session.AbpSessionExtensions' threw an exception. ---- Castle.MicroKernel.ComponentNotFoundException : No component for supporting the service Abp.Runtime.Session.IPrincipalAccessor was found" />
      <item value="Destination array was not long enough. Check the destination index, length, and the array's lower bounds. (Parameter 'destinationArray')" />
      <item value="The method uses the Array.Copy method to copy the elements." />
      <item value="Obsolete" />
      <item value="No suitable constructor found for entity type 'Opinions'. The following constructors had parameters that could not be bound to properties of the entity type: cannot bind 'tenantId', 'userId' in 'Opinions(Nullable&lt;int&gt; tenantId, long userId, string remark)'." />
      <item value="cannot be marked as owned because a non-owned entity type with the same name already exists" />
      <item value="The type 'Opinion' cannot be marked as owned because a non-owned entity type with the same name already exists." />
      <item value="non-owned entity" />
      <item value="Destination" />
      <item value="Guarantee Picture" />
      <item value="Guarantee Image" />
      <item value="Guarantee" />
      <item value="Attempted to update or delete an entity that does not exist in the store." />
      <item value="Cannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances. Object name: 'OSDbContext'." />
      <item value="Class 'AbroadApplicationForm' has some virtual members but no inheritors" />
      <item value="The child/dependent side could not be determined for the one-to-one relationship between 'AbroadApplicationForm.AuditedAbroad' and 'AuditedAbroad.ApplicationForm'. To identify the child/dependent side of the relationship, configure the foreign key property. If these navigations should not be part of the same relationship configure them without specifying the inverse. See http://go.microsoft.com/fwlink/?LinkId=724062 for more details." />
      <item value="No suitable constructor found for entity type 'AuditedAbroad'. The following constructors had parameters that could not be bound to properties of the entity type: cannot bind 'applicationForm' in 'AuditedAbroad(AbroadApplicationForm applicationForm)'." />
      <item value="Implicitly captured closure: yangpeng" />
      <item value="There are a lot of fixes in Unity support" />
      <item value="The bundled MSBuild version has been updated to support building .NET Core 3 projects." />
      <item value="Scrolling in a database table view/editor with many columns is now faster." />
      <item value="xport/Import settings works again." />
      <item value="Enabling Roslyn Analyzers in the solution does not hang code analysis anymore." />
      <item value="Add, Update, Change, and other actions work again in the NuGet tool window on Linux" />
      <item value="dd, Update, Change, and other actions work again in the NuGet tool window on Linux The bundled MSBuild version has been updated to support building .NET Core 3 projects. There are a lot of fixes in Unity support. Enabling Roslyn Analyzers in the solution does not hang code analysis anymore. Export/Import settings works again. Scrolling in a database table view/editor with many columns is now faster." />
      <item value="Instantly shows changes made to your code during a debugging session, making it unnecessary to reload web pages and Node.js files. By default, the Live Edit functionality is enabled for HTML and CSS files only. To turn it on for JavaScript, Node.js, and other file types, go to Settings/Preferences | Build, Execution, Deployment | Debugger | Live Edit. To start using Live Edit, open the HTML file you’re working with and select Debug in its context menu. This will launch the JavaScript debugger in WebStorm and open your file in the browser. As you edit the code, you’ll see the changes you make reflected in the browser." />
      <item value="Language injection Pattern validation Regular expression support Language Injections page in the Settings/Preferences dialog. Ability to edit injected code in the special scratch-pad editor" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="83" />
        <entry key="ENGLISH" value="90" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="20191213000365671" />
      </app-key>
    </option>
    <option name="foldOriginal" value="true" />
    <option name="ignoreRegExp" value="" />
    <option name="overrideFont" value="true" />
    <option name="phoneticFontFamily" value="Courier New" />
    <option name="primaryFontFamily" value="Microsoft YaHei" />
    <option name="showWordsOnStartup" value="true" />
    <option name="translator" value="ai.youdao" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="5514f44dfc808a03" />
        <option name="appKeyConfigured" value="true" />
      </youdao-translate>
    </option>
  </component>
</application>